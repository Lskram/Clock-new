import 'package:get/get.dart';
import 'package:flutter/material.dart';

import '../models/notification_session.dart';
import '../models/treatment.dart';
import '../services/notification_service.dart';
import '../services/database_service.dart';
import '../services/random_service.dart';
import '../routes/app_routes.dart';

class NotificationController extends GetxController {
  final NotificationService _notificationService =
      Get.find<NotificationService>();
  final DatabaseService _databaseService = Get.find<DatabaseService>();
  final RandomService _randomService = Get.find<RandomService>();

  // Observable variables
  final Rx<NotificationSession?> currentSession =
      Rx<NotificationSession?>(null);
  final RxList<Treatment> currentTreatments = <Treatment>[].obs;
  final RxList<bool> treatmentCompletionStatus = <bool>[].obs;
  final RxString currentPainPointName = ''.obs;
  final RxInt completedTreatmentCount = 0.obs;
  final RxBool isSessionActive = false.obs;
  final RxBool isLoading = false.obs;
  final RxString sessionGreeting = ''.obs;

  @override
  void onInit() {
    super.onInit();
    _checkForActiveSession();
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ session ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  Future<void> _checkForActiveSession() async {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ (‡∏à‡∏≤‡∏Å notification tap)
      final sessionId = Get.parameters['sessionId'];
      if (sessionId != null && sessionId.isNotEmpty) {
        await loadSessionById(sessionId);
        return;
      }

      // ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å pending sessions ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
      final todaySessions = await _databaseService.getTodaySessions();
      final pendingSession = todaySessions
          .where((s) =>
              s.status == NotificationStatus.pending ||
              s.status == NotificationStatus.snoozed)
          .firstOrNull;

      if (pendingSession != null) {
        await loadSessionById(pendingSession.id);
      }
    } catch (e) {
      print('Error checking for active session: $e');
    }
  }

  /// ‡πÇ‡∏´‡∏•‡∏î session ‡∏ï‡∏≤‡∏° ID
  Future<void> loadSessionById(String sessionId) async {
    try {
      isLoading.value = true;

      final session = await _databaseService.getNotificationSession(sessionId);
      if (session == null) {
        Get.snackbar('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session');
        return;
      }

      await _loadSessionData(session);
    } catch (e) {
      print('Error loading session: $e');
      Get.snackbar('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
    } finally {
      isLoading.value = false;
    }
  }

  /// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á session
  Future<void> _loadSessionData(NotificationSession session) async {
    currentSession.value = session;
    isSessionActive.value = true;

    // ‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏∑‡πà‡∏≠ pain point
    currentPainPointName.value = await _randomService.getPainPointName(
      session.selectedPainPointId,
    );

    // ‡πÇ‡∏´‡∏•‡∏î treatments
    final treatments = <Treatment>[];
    for (final treatmentId in session.selectedTreatmentIds) {
      final treatment = await _randomService.getTreatment(treatmentId);
      if (treatment != null) {
        treatments.add(treatment);
      }
    }

    currentTreatments.assignAll(treatments);

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ treatments (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô false ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
    treatmentCompletionStatus.assignAll(
      List.generate(treatments.length, (index) => false),
    );

    completedTreatmentCount.value = 0;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢
    sessionGreeting.value = _randomService.generateSessionGreeting();

    print('Session loaded: ${session.id}');
    print('Pain point: ${currentPainPointName.value}');
    print('Treatments count: ${treatments.length}');
  }

  /// ‡∏°‡∏≤‡∏£‡πå‡∏Ñ‡∏ß‡πà‡∏≤‡∏ó‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
  void markTreatmentCompleted(int treatmentIndex) {
    if (treatmentIndex >= 0 &&
        treatmentIndex < treatmentCompletionStatus.length) {
      treatmentCompletionStatus[treatmentIndex] = true;
      _updateCompletedCount();
      update(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
    }
  }

  /// ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏£‡πå‡∏Ñ‡∏ó‡πà‡∏≤
  void markTreatmentUncompleted(int treatmentIndex) {
    if (treatmentIndex >= 0 &&
        treatmentIndex < treatmentCompletionStatus.length) {
      treatmentCompletionStatus[treatmentIndex] = false;
      _updateCompletedCount();
      update();
    }
  }

  /// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
  void _updateCompletedCount() {
    completedTreatmentCount.value =
        treatmentCompletionStatus.where((completed) => completed).length;
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ó‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  bool get isAllTreatmentsCompleted {
    return completedTreatmentCount.value == currentTreatments.length &&
        currentTreatments.isNotEmpty;
  }

  /// ‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤
  double get progressPercentage {
    if (currentTreatments.isEmpty) return 0.0;
    return completedTreatmentCount.value / currentTreatments.length;
  }

  /// ‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á session
  Duration get totalSessionDuration {
    return Duration(
      seconds: currentTreatments
          .map((t) => t.durationSeconds)
          .fold(0, (sum, duration) => sum + duration),
    );
  }

  /// ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô session
  Future<void> completeSession() async {
    if (currentSession.value == null) return;

    try {
      isLoading.value = true;

      await _notificationService.completeNotificationSession(
        currentSession.value!.id,
      );

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏î‡∏µ
      Get.snackbar(
        '‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å! üéâ',
        '‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏à‡∏∞‡∏™‡∏î‡∏ä‡∏∑‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô',
        backgroundColor: Colors.green.withOpacity(0.8),
        colorText: Colors.white,
        duration: const Duration(seconds: 3),
      );

      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      _resetSession();

      // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
      Get.offNamedUntil(AppRoutes.HOME, (route) => false);
    } catch (e) {
      print('Error completing session: $e');
      Get.snackbar('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏î‡πâ');
    } finally {
      isLoading.value = false;
    }
  }

  /// ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  Future<void> snoozeSession(int minutes) async {
    if (currentSession.value == null) return;

    try {
      isLoading.value = true;

      await _notificationService.snoozeNotification(
        currentSession.value!.id,
        minutes,
      );

      Get.snackbar(
        '‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‚è∞',
        '‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô $minutes ‡∏ô‡∏≤‡∏ó‡∏µ',
        backgroundColor: Colors.orange.withOpacity(0.8),
        colorText: Colors.white,
      );

      _resetSession();
      Get.back(); // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    } catch (e) {
      print('Error snoozing session: $e');
      Get.snackbar('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ');
    } finally {
      isLoading.value = false;
    }
  }

  /// ‡∏Ç‡πâ‡∏≤‡∏° session ‡∏ô‡∏µ‡πâ
  Future<void> skipSession() async {
    if (currentSession.value == null) return;

    try {
      isLoading.value = true;

      await _notificationService.skipNotificationSession(
        currentSession.value!.id,
      );

      Get.snackbar(
        '‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß ‚è≠Ô∏è',
        '‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£! ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏∞‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏≠‡∏µ‡∏Å',
        backgroundColor: Colors.grey.withOpacity(0.8),
        colorText: Colors.white,
      );

      _resetSession();
      Get.offNamedUntil(AppRoutes.HOME, (route) => false);
    } catch (e) {
      print('Error skipping session: $e');
      Get.snackbar('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡πâ‡∏≤‡∏° session ‡πÑ‡∏î‡πâ');
    } finally {
      isLoading.value = false;
    }
  }

  /// ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session
  void _resetSession() {
    currentSession.value = null;
    currentTreatments.clear();
    treatmentCompletionStatus.clear();
    currentPainPointName.value = '';
    completedTreatmentCount.value = 0;
    isSessionActive.value = false;
    sessionGreeting.value = '';
  }

  /// ‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ snooze options
  List<Map<String, dynamic>> get snoozeOptions {
    return [
      {'minutes': 5, 'label': '5 ‡∏ô‡∏≤‡∏ó‡∏µ'},
      {'minutes': 15, 'label': '15 ‡∏ô‡∏≤‡∏ó‡∏µ'},
      {'minutes': 30, 'label': '30 ‡∏ô‡∏≤‡∏ó‡∏µ'},
    ];
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool get canSnooze {
    return currentSession.value?.canSnooze ?? false;
  }

  /// ‡πÑ‡∏î‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  int get snoozeCount {
    return currentSession.value?.snoozeCount ?? 0;
  }

  /// ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• summary ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  Future<Map<String, dynamic>> getSessionSummary() async {
    if (currentSession.value == null) return {};

    return await _randomService.createSessionSummary(
      currentSession.value!.selectedPainPointId,
      currentSession.value!.selectedTreatmentIds,
    );
  }

  /// ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏î‡∏≠‡∏∞‡∏•‡πá‡∏≠‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≤‡∏°
  Future<void> showSkipConfirmationDialog() async {
    Get.dialog(
      AlertDialog(
        title: const Text('‡∏Ç‡πâ‡∏≤‡∏° Session ‡∏ô‡∏µ‡πâ?'),
        content: const Text(
          '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ? '
          '‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô',
        ),
        actions: [
          TextButton(
            onPressed: () => Get.back(),
            child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
          ),
          ElevatedButton(
            onPressed: () {
              Get.back();
              skipSession();
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.grey,
            ),
            child: const Text('‡∏Ç‡πâ‡∏≤‡∏°'),
          ),
        ],
      ),
    );
  }

  /// ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏î‡∏≠‡∏∞‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å snooze time
  Future<void> showSnoozeOptionsDialog() async {
    if (!canSnooze) {
      Get.snackbar(
        '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ',
        '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß',
        backgroundColor: Colors.red.withOpacity(0.8),
        colorText: Colors.white,
      );
      return;
    }

    Get.dialog(
      AlertDialog(
        title: const Text('‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: snoozeOptions.map((option) {
            return ListTile(
              title: Text('‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô ${option['label']}'),
              onTap: () {
                Get.back();
                snoozeSession(option['minutes']);
              },
            );
          }).toList(),
        ),
        actions: [
          TextButton(
            onPressed: () => Get.back(),
            child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
          ),
        ],
      ),
    );
  }
}
